generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters", "extendedWhereUnique"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Job {
  id     Int       @id @default(autoincrement())
  name   String
  role   JobRole
  skills Ability[]
}

model Ability {
  id       Int          @id @default(autoincrement())
  name     String
  duration Int
  cooldown Int
  level    Int
  target   PlayerTarget
  type     AbilityType
  jobId    Int
  job      Job          @relation(fields: [jobId], references: [id])
}

model Mechanic {
  id           Int           @id @default(autoincrement())
  name         String
  source       Source
  castTime     Int
  targets      EnemyTarget[]
  mechanicType MechanicType
  damageType   DamageType
  description  String
  nodes        Node[]
}

model Node {
  id          Int       @id @default(autoincrement())
  timestamp   Int
  duration    Int
  mechanicId  Int
  encounterId Int
  encounter   Encounter @relation(fields: [encounterId], references: [id])
  mechanic    Mechanic  @relation(fields: [mechanicId], references: [id])
}

model Encounter {
  id        Int    @id @default(autoincrement())
  name      String
  level     Int
  duration  Int
  mechanics Node[]
  presets   Preset[]
}

model Preset {
  id          Int         @id @default(autoincrement())
  name        String
  encounter   Encounter   @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  encounterId Int 
  flags       Json?
  segments    Json?
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      Bytes?
  salt          Bytes?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  presets       Preset[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

enum Source {
  ALLY
  BOSS
  ENEMY
}

enum PlayerTarget {
  SELF
  ALLY
  RAID
}

enum JobRole {
  DPS
  TANK
  HEALER
}

enum AbilityType {
  MITIGATION
  HEALING
  BUFF
  OTHER
}

enum EnemyTarget {
  SELF
  RAID
  GROUND
  MAIN_THREAT
  SECONDARY_THREAT
  RANDOM_PLAYER
}

enum MechanicType {
  DAMAGE
  ENRAGE
  SETUP
  OTHER
}

enum DamageType {
  PHYSICAL
  MAGICAL
  DARKNESS
  NONE
}
